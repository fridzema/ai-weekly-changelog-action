name: Weekly Changelog via OpenRouter

on:
  workflow_call:
    inputs:
      days_back:
        description: "Number of days to look back for commits"
        type: number
        default: 7
        required: false
      model:
        description: "OpenRouter model (e.g. openai/gpt-4o-mini)"
        type: string
        default: "openai/gpt-4o-mini"
        required: false
      language:
        description: "Output language for changelog"
        type: string
        default: "English"
        required: false
      force:
        description: "Force update even if week entry already exists"
        type: boolean
        default: false
        required: false
      extended:
        description: "Extended analysis with file changes and deeper commit inspection"
        type: boolean
        default: false
        required: false
    secrets:
      OPENROUTER_API_KEY:
        required: true

jobs:
  changelog:
    runs-on: ubuntu-latest
    permissions:
      contents: write # Required for committing changes

    steps:
      - name: Validate inputs
        run: |
          DAYS_BACK="${{ inputs.days_back || 7 }}"
          if ! [[ "$DAYS_BACK" =~ ^[0-9]+$ ]] || [ "$DAYS_BACK" -gt 365 ] || [ "$DAYS_BACK" -lt 1 ]; then
            echo "❌ Invalid days_back value: $DAYS_BACK. Must be a number between 1-365."
            exit 1
          fi
          echo "✅ Input validation passed"
          echo "🔧 Force mode: ${{ inputs.force || false }}"
          echo "🔍 Extended mode: ${{ inputs.extended || false }}"

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch full git history for log commands
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Collect commits and file changes
        id: commits
        run: |
          # Determine number of days back (default 7, or from input)
          DAYS_BACK="${{ inputs.days_back || 7 }}"
          EXTENDED="${{ inputs.extended || false }}"

          # Calculate date from which commits should be collected
          if [[ "$OSTYPE" == "darwin"* ]]; then
            # macOS date syntax
            SINCE_DATE=$(date -v-${DAYS_BACK}d -u +"%Y-%m-%dT%H:%M:%SZ")
          else
            # Linux date syntax
            SINCE_DATE=$(date -d "${DAYS_BACK} days ago" -u +"%Y-%m-%dT%H:%M:%SZ")
          fi

          echo "Collecting commits since: $SINCE_DATE"
          echo "Extended analysis: $EXTENDED"

          # Collect commits with more information including hash for links
          git log \
            --since="$SINCE_DATE" \
            --pretty=format:'%H|%s|%an|%ad|%h' \
            --date=short \
            --grep="^Merge branch" --invert-grep \
            --grep="^Update version" --invert-grep \
            --grep="^docs: update weekly changelog" --invert-grep \
            --no-merges > commits.txt || true

          # Extended analysis: collect file changes and detailed commit info
          if [[ "$EXTENDED" == "true" ]]; then
            echo "🔍 Performing extended analysis..."
            
            # Get detailed file changes
            git log \
              --since="$SINCE_DATE" \
              --name-status \
              --pretty=format:'COMMIT:%H|%s|%an|%ad|%h' \
              --grep="^Merge branch" --invert-grep \
              --grep="^Update version" --invert-grep \
              --grep="^docs: update weekly changelog" --invert-grep \
              --no-merges > commits_extended.txt || true

            # Get file change statistics
            git log \
              --since="$SINCE_DATE" \
              --stat \
              --pretty=format:'COMMIT:%H|%s|%an|%ad|%h' \
              --grep="^Merge branch" --invert-grep \
              --grep="^Update version" --invert-grep \
              --grep="^docs: update weekly changelog" --invert-grep \
              --no-merges > commits_stats.txt || true

            # Analyze file types and directories affected
            git log \
              --since="$SINCE_DATE" \
              --name-only \
              --pretty=format: \
              --grep="^Merge branch" --invert-grep \
              --grep="^Update version" --invert-grep \
              --grep="^docs: update weekly changelog" --invert-grep \
              --no-merges | \
              grep -v '^$' | \
              sort | uniq > files_changed.txt || true

            # Get lines changed statistics
            LINES_ADDED=$(git log --since="$SINCE_DATE" --pretty=tformat: --numstat --grep="^Merge branch" --invert-grep --grep="^Update version" --invert-grep --grep="^docs: update weekly changelog" --invert-grep --no-merges | awk '{add+=$1} END {print add+0}')
            LINES_DELETED=$(git log --since="$SINCE_DATE" --pretty=tformat: --numstat --grep="^Merge branch" --invert-grep --grep="^Update version" --invert-grep --grep="^docs: update weekly changelog" --invert-grep --no-merges | awk '{del+=$2} END {print del+0}')
            FILES_CHANGED=$(git log --since="$SINCE_DATE" --name-only --pretty=format: --grep="^Merge branch" --invert-grep --grep="^Update version" --invert-grep --grep="^docs: update weekly changelog" --invert-grep --no-merges | grep -v '^$' | sort | uniq | wc -l)

            echo "lines_added=$LINES_ADDED" >> "$GITHUB_OUTPUT"
            echo "lines_deleted=$LINES_DELETED" >> "$GITHUB_OUTPUT"
            echo "files_changed=$FILES_CHANGED" >> "$GITHUB_OUTPUT"
            echo "extended_analysis=true" >> "$GITHUB_OUTPUT"

            # Debug extended info
            echo "📊 Extended Statistics:"
            echo "  Lines added: $LINES_ADDED"
            echo "  Lines deleted: $LINES_DELETED"
            echo "  Files changed: $FILES_CHANGED"
          else
            echo "extended_analysis=false" >> "$GITHUB_OUTPUT"
          fi

          # Check if there are commits
          if [[ ! -s commits.txt ]]; then
            echo "No commits found in the past $DAYS_BACK days"
            echo "has_commits=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          echo "has_commits=true" >> "$GITHUB_OUTPUT"
          echo "commit_count=$(wc -l < commits.txt)" >> "$GITHUB_OUTPUT"

          # Debug: show found commits
          echo "Found commits:"
          cat commits.txt

      - name: Setup Python
        if: steps.commits.outputs.has_commits == 'true'
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Cache pip dependencies
        if: steps.commits.outputs.has_commits == 'true'
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-changelog

      - name: Install Python dependencies
        if: steps.commits.outputs.has_commits == 'true'
        run: |
          python -m pip install --upgrade pip
          pip install "openai>=1.14,<2" requests

      - name: Generate changelog with OpenRouter
        if: steps.commits.outputs.has_commits == 'true'
        env:
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
          MODEL: ${{ inputs.model || 'openai/gpt-4o-mini' }}
          OUTPUT_LANGUAGE: ${{ inputs.language || 'English' }}
          FORCE_UPDATE: ${{ inputs.force || false }}
          EXTENDED_ANALYSIS: ${{ steps.commits.outputs.extended_analysis }}
          LINES_ADDED: ${{ steps.commits.outputs.lines_added }}
          LINES_DELETED: ${{ steps.commits.outputs.lines_deleted }}
          FILES_CHANGED: ${{ steps.commits.outputs.files_changed }}
        run: |
          python3 << 'EOF'
          import os
          import sys
          import datetime
          import textwrap
          import time
          import re
          from functools import wraps
          from openai import OpenAI

          def retry_api_call(max_retries=3, delay=2):
              """Decorator to retry API calls with exponential backoff"""
              def decorator(func):
                  @wraps(func)
                  def wrapper(*args, **kwargs):
                      for attempt in range(max_retries):
                          try:
                              return func(*args, **kwargs)
                          except Exception as e:
                              if attempt == max_retries - 1:
                                  print(f"❌ Final attempt failed: {str(e)}")
                                  raise
                              wait_time = delay * (2 ** attempt)
                              print(f"⚠️  API call failed (attempt {attempt + 1}/{max_retries}): {str(e)}")
                              print(f"🔄 Retrying in {wait_time}s...")
                              time.sleep(wait_time)
                      return None
                  return wrapper
              return decorator

          # Check if API key is present
          api_key = os.getenv("OPENROUTER_API_KEY")
          if not api_key:
              print("❌ OPENROUTER_API_KEY not found in secrets")
              sys.exit(1)

          # Configure OpenAI client for OpenRouter
          client = OpenAI(
              api_key=api_key,
              base_url="https://openrouter.ai/api/v1"
          )

          model = os.getenv("MODEL", "openai/gpt-4o-mini")
          output_language = os.getenv("OUTPUT_LANGUAGE", "English")
          force_update = os.getenv("FORCE_UPDATE", "false").lower() == "true"
          extended_analysis = os.getenv("EXTENDED_ANALYSIS", "false").lower() == "true"

          print(f"🤖 Using model: {model}")
          print(f"🌍 Output language: {output_language}")
          print(f"🔧 Force update: {force_update}")
          print(f"🔍 Extended analysis: {extended_analysis}")

          # Language-specific configurations
          language_configs = {
              "English": {
                  "week_label": "Week",
                  "generated_on": "Generated on",
                  "commits_label": "commits",
                  "tech_changes": "🔧 Technical Changes",
                  "user_impact": "📈 User Impact",
                  "all_commits": "📋 All Commits",
                  "statistics": "📊 Statistics",
                  "file_changes": "📁 File Changes",
                  "changelog_title": "Changelog",
                  "auto_updated": "This file is automatically updated with weekly changes.",
                  "fallback_tech": "Technical changes were made this week. See commit details below for specifics.",
                  "fallback_business": "Various improvements and updates were implemented this week.",
                  "lines_added": "lines added",
                  "lines_deleted": "lines deleted",
                  "files_changed": "files changed",
                  "force_updated": "(Force Updated)"
              },
              "Dutch": {
                  "week_label": "Week",
                  "generated_on": "Gegenereerd op",
                  "commits_label": "commits",
                  "tech_changes": "🔧 Technische wijzigingen",
                  "user_impact": "📈 Impact voor gebruikers",
                  "all_commits": "📋 Alle commits",
                  "statistics": "📊 Statistieken",
                  "file_changes": "📁 Bestandswijzigingen",
                  "changelog_title": "Changelog",
                  "auto_updated": "Dit bestand wordt automatisch bijgewerkt met wekelijkse wijzigingen.",
                  "fallback_tech": "Er zijn deze week technische wijzigingen doorgevoerd. Zie onderstaande commit details.",
                  "fallback_business": "Verschillende verbeteringen en updates zijn deze week geïmplementeerd.",
                  "lines_added": "regels toegevoegd",
                  "lines_deleted": "regels verwijderd",
                  "files_changed": "bestanden gewijzigd",
                  "force_updated": "(Geforceerd bijgewerkt)"
              },
              "German": {
                  "week_label": "Woche",
                  "generated_on": "Generiert am",
                  "commits_label": "Commits",
                  "tech_changes": "🔧 Technische Änderungen",
                  "user_impact": "📈 Auswirkungen für Benutzer",
                  "all_commits": "📋 Alle Commits",
                  "statistics": "📊 Statistiken",
                  "file_changes": "📁 Dateiänderungen",
                  "changelog_title": "Changelog",
                  "auto_updated": "Diese Datei wird automatisch mit wöchentlichen Änderungen aktualisiert.",
                  "fallback_tech": "Diese Woche wurden technische Änderungen vorgenommen. Details siehe Commits unten.",
                  "fallback_business": "Verschiedene Verbesserungen und Updates wurden diese Woche implementiert.",
                  "lines_added": "Zeilen hinzugefügt",
                  "lines_deleted": "Zeilen gelöscht",
                  "files_changed": "Dateien geändert",
                  "force_updated": "(Zwangsweise aktualisiert)"
              },
              "French": {
                  "week_label": "Semaine",
                  "generated_on": "Généré le",
                  "commits_label": "commits",
                  "tech_changes": "🔧 Modifications techniques",
                  "user_impact": "📈 Impact utilisateur",
                  "all_commits": "📋 Tous les commits",
                  "statistics": "📊 Statistiques",
                  "file_changes": "📁 Modifications de fichiers",
                  "changelog_title": "Journal des modifications",
                  "auto_updated": "Ce fichier est automatiquement mis à jour avec les modifications hebdomadaires.",
                  "fallback_tech": "Des modifications techniques ont été apportées cette semaine. Voir les détails des commits ci-dessous.",
                  "fallback_business": "Diverses améliorations et mises à jour ont été implémentées cette semaine.",
                  "lines_added": "lignes ajoutées",
                  "lines_deleted": "lignes supprimées",
                  "files_changed": "fichiers modifiés",
                  "force_updated": "(Mise à jour forcée)"
              },
              "Spanish": {
                  "week_label": "Semana",
                  "generated_on": "Generado el",
                  "commits_label": "commits",
                  "tech_changes": "🔧 Cambios técnicos",
                  "user_impact": "📈 Impacto del usuario",
                  "all_commits": "📋 Todos los commits",
                  "statistics": "📊 Estadísticas",
                  "file_changes": "📁 Cambios en archivos",
                  "changelog_title": "Registro de cambios",
                  "auto_updated": "Este archivo se actualiza automáticamente con cambios semanales.",
                  "fallback_tech": "Se realizaron cambios técnicos esta semana. Ver detalles de commits abajo.",
                  "fallback_business": "Se implementaron varias mejoras y actualizaciones esta semana.",
                  "lines_added": "líneas agregadas",
                  "lines_deleted": "líneas eliminadas",
                  "files_changed": "archivos cambiados",
                  "force_updated": "(Actualización forzada)"
              }
          }

          config = language_configs.get(output_language, language_configs["English"])

          # Read commits
          try:
              with open("commits.txt", "r", encoding="utf-8") as f:
                  commits_raw = f.read().strip()
          except FileNotFoundError:
              print("❌ commits.txt not found")
              sys.exit(1)

          if not commits_raw:
              print("ℹ️  No commits to process")
              sys.exit(0)

          # Read extended data if available
          extended_data = ""
          file_changes_data = ""

          if extended_analysis:
              try:
                  # Read detailed commit info
                  if os.path.exists("commits_extended.txt"):
                      with open("commits_extended.txt", "r", encoding="utf-8") as f:
                          extended_data = f.read().strip()
                  
                  # Read file changes
                  if os.path.exists("files_changed.txt"):
                      with open("files_changed.txt", "r", encoding="utf-8") as f:
                          files_list = f.read().strip().split('\n')
                          # Group files by type/directory
                          file_groups = {}
                          for file_path in files_list:
                              if file_path:
                                  # Get file extension or directory
                                  if '.' in file_path:
                                      ext = file_path.split('.')[-1].lower()
                                      key = f"*.{ext} files"
                                  else:
                                      key = "Config/Other files"
                                  
                                  if key not in file_groups:
                                      file_groups[key] = []
                                  file_groups[key].append(file_path)
                          
                          file_changes_summary = []
                          for group, files in sorted(file_groups.items()):
                              file_changes_summary.append(f"**{group}**: {', '.join(files[:5])}")
                              if len(files) > 5:
                                  file_changes_summary.append(f"  _(and {len(files)-5} more)_")
                          
                          file_changes_data = '\n'.join(file_changes_summary)
              except Exception as e:
                  print(f"⚠️  Could not read extended data: {e}")

          # Format commits for better readability
          commits_formatted = []
          commit_links = []
          repo_url = f"https://github.com/{os.getenv('GITHUB_REPOSITORY', 'unknown')}"

          for line in commits_raw.split('\n'):
              if '|' in line:
                  parts = line.split('|')
                  if len(parts) >= 5:
                      full_hash, subject, author, date, short_hash = parts[:5]
                      commits_formatted.append(f"• {subject} ({author}, {date})")
                      commit_links.append(f"- [{short_hash}]({repo_url}/commit/{full_hash}) {subject} - {author}")
                  else:
                      commits_formatted.append(f"• {line}")
                      commit_links.append(f"- {line}")
              else:
                  commits_formatted.append(f"• {line}")
                  commit_links.append(f"- {line}")

          commits_text = '\n'.join(commits_formatted)
          commits_links_text = '\n'.join(commit_links)

          # Enhanced prompts with extended data
          base_context = f"Commits:\n{commits_text}"

          if extended_analysis and extended_data:
              base_context += f"\n\nDetailed file changes and statistics are also available for deeper analysis."
              if file_changes_data:
                  base_context += f"\n\nFile changes summary:\n{file_changes_data}"

          tech_prompt = textwrap.dedent(f"""
          You are a senior software developer writing a technical changelog.

          Analyze these commits and create a structured technical summary:

          {base_context}

          Please provide a summary in {output_language} with:
          1. A brief introduction (1-2 sentences)
          2. Main changes by category (Features, Bugfixes, Refactoring, etc.)
          3. Technical highlights
          {"4. Impact assessment based on file changes and statistics" if extended_analysis else ""}

          Keep it concise but informative. Use appropriate technical terminology for the target language.
          {"Focus on the most significant changes and their technical implications." if extended_analysis else ""}
          """).strip()

          business_prompt = textwrap.dedent(f"""
          You are a product manager communicating updates to stakeholders and end users.

          Analyze these technical commits and translate them to business impact:

          {base_context}

          Write a summary in {output_language} that is understandable for non-technical people:
          1. What do these changes mean for users?
          2. What benefits do they bring?
          3. Are there important changes that people should be aware of?
          {"4. Overall scope and significance of this week's changes" if extended_analysis else ""}

          Avoid jargon and technical details. Focus on value and impact.
          {"Consider the scope of changes when assessing business impact." if extended_analysis else ""}
          """).strip()

          @retry_api_call(max_retries=3, delay=2)
          def generate_summary(prompt, description):
              print(f"🔄 Generating {description}...")
              response = client.chat.completions.create(
                  model=model,
                  messages=[
                      {"role": "system", "content": "You are an experienced writer who creates clear, concise summaries."},
                      {"role": "user", "content": prompt}
                  ],
                  max_tokens=1200 if extended_analysis else 1000,
                  temperature=0.3,
                  extra_headers={
                      "HTTP-Referer": f"https://github.com/{os.getenv('GITHUB_REPOSITORY', 'unknown')}",
                      "X-Title": "Weekly-Changelog-Generator"
                  }
              )
              return response.choices[0].message.content.strip()

          # Generate summaries with fallback
          try:
              tech_summary = generate_summary(tech_prompt, "technical summary")
              print("✅ Technical summary generated successfully")
          except Exception as e:
              print(f"⚠️  Using fallback for technical summary due to: {str(e)}")
              tech_summary = config['fallback_tech']

          try:
              business_summary = generate_summary(business_prompt, "business summary")
              print("✅ Business summary generated successfully")
          except Exception as e:
              print(f"⚠️  Using fallback for business summary due to: {str(e)}")
              business_summary = config['fallback_business']

          # Calculate week and year
          today = datetime.date.today()
          week_num = today.isocalendar()[1]
          year = today.year

          # Format date according to language
          date_formats = {
              "English": "%m-%d-%Y",
              "Dutch": "%d-%m-%Y", 
              "German": "%d.%m.%Y",
              "French": "%d/%m/%Y",
              "Spanish": "%d/%m/%Y"
          }
          date_format = date_formats.get(output_language, "%m-%d-%Y")
          formatted_date = today.strftime(date_format)

          # Check for duplicate entries and handle force mode
          changelog_path = "CHANGELOG.md"
          week_header = f"## {config['week_label']} {week_num}, {year}"
          force_suffix = f" {config['force_updated']}" if force_update else ""

          try:
              if os.path.exists(changelog_path):
                  with open(changelog_path, "r", encoding="utf-8") as f:
                      existing_content = f.read()
                  
                  if week_header in existing_content and not force_update:
                      print(f"⚠️  Entry for {config['week_label']} {week_num}, {year} already exists. Use force=true to update anyway.")
                      sys.exit(0)
                  elif week_header in existing_content and force_update:
                      print(f"🔧 Force mode: Updating existing entry for {config['week_label']} {week_num}, {year}")
                      # Remove existing entry
                      lines = existing_content.split('\n')
                      new_lines = []
                      skip_section = False
                      
                      for line in lines:
                          if line.startswith(week_header):
                              skip_section = True
                              continue
                          elif line.startswith('## ') and skip_section:
                              skip_section = False
                              new_lines.append(line)
                          elif line.startswith('---') and skip_section:
                              skip_section = False
                              continue
                          elif not skip_section:
                              new_lines.append(line)
                      
                      existing_content = '\n'.join(new_lines)
              else:
                  existing_content = f"# {config['changelog_title']}\n\n{config['auto_updated']}\n"

              # Prepare statistics section for extended analysis
              stats_section = ""
              if extended_analysis:
                  lines_added = os.getenv("LINES_ADDED", "0")
                  lines_deleted = os.getenv("LINES_DELETED", "0")
                  files_changed = os.getenv("FILES_CHANGED", "0")
                  
                  stats_section = f"""
              ### {config['statistics']}
              - **{lines_added}** {config['lines_added']}
              - **{lines_deleted}** {config['lines_deleted']} 
              - **{files_changed}** {config['files_changed']}
              """
                  
                  if file_changes_data:
                      stats_section += f"""
              ### {config['file_changes']}
              {file_changes_data}
              """

              # Create changelog entry
              changelog_entry = textwrap.dedent(f"""
              {week_header}{force_suffix}

              *{config['generated_on']} {formatted_date} - {len(commits_formatted)} {config['commits_label']}*

              ### {config['tech_changes']}
              {tech_summary}

              ### {config['user_impact']}
              {business_summary}
              {stats_section}
              ### {config['all_commits']}
              {commits_links_text}

              ---
              """).strip()

              # Prepend new entry to the changelog (after header)
              lines = existing_content.split('\n')
              header_end = 0
              
              # Find where to insert (after the main header and description)
              for i, line in enumerate(lines):
                  if line.startswith('# ') or line.strip() == config['auto_updated']:
                      header_end = i + 1
                  elif line.startswith('## ') or (i > 0 and lines[i-1].strip() == config['auto_updated']):
                      break
              
              # Insert the new entry
              new_lines = lines[:header_end] + ['', changelog_entry, ''] + lines[header_end:]
              new_content = '\n'.join(new_lines)

              # Write updated changelog
              with open(changelog_path, "w", encoding="utf-8") as f:
                  f.write(new_content)

              action = "updated (forced)" if force_update else "updated"
              print(f"✅ Changelog {action} for {config['week_label']} {week_num}, {year}")

          except Exception as e:
              print(f"❌ Error writing changelog: {str(e)}")
              sys.exit(1)
          EOF

      - name: Get week info
        id: get_week
        run: |
          echo "week_num=$(date +%V)" >> "$GITHUB_OUTPUT"
          echo "year=$(date +%Y)" >> "$GITHUB_OUTPUT"

      - name: Commit and push changelog
        if: steps.commits.outputs.has_commits == 'true'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: |
            docs: update weekly changelog (week ${{ steps.get_week.outputs.week_num }}, ${{ steps.get_week.outputs.year }})${{ inputs.force && ' - forced update' || '' }}
          file_pattern: "CHANGELOG.md"
          commit_user_name: "github-actions[bot]"
          commit_user_email: "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Create summary
        if: steps.commits.outputs.has_commits == 'true'
        run: |
          echo "## 📝 Weekly Changelog Generated" >> $GITHUB_STEP_SUMMARY
          echo "- **Commits processed:** ${{ steps.commits.outputs.commit_count }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Model used:** ${{ inputs.model || 'openai/gpt-4o-mini' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Language:** ${{ inputs.language || 'English' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Days back:** ${{ inputs.days_back || 7 }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Force mode:** ${{ inputs.force || false }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Extended analysis:** ${{ inputs.extended || false }}" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ steps.commits.outputs.extended_analysis }}" == "true" ]]; then
            echo "- **Lines added:** ${{ steps.commits.outputs.lines_added }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Lines deleted:** ${{ steps.commits.outputs.lines_deleted }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Files changed:** ${{ steps.commits.outputs.files_changed }}" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Changelog has been updated! 🎉" >> $GITHUB_STEP_SUMMARY

      - name: No commits found
        if: steps.commits.outputs.has_commits == 'false'
        run: |
          echo "## ℹ️ No Changes This Week" >> $GITHUB_STEP_SUMMARY
          echo "No commits found in the past ${{ inputs.days_back || 7 }} days." >> $GITHUB_STEP_SUMMARY
          echo "Changelog was not updated." >> $GITHUB_STEP_SUMMARY
